// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mock_router is a generated GoMock package.
package mock_router

import (
	context "context"
	reflect "reflect"

	db "github.com/basedalex/yadro-xkcd/internal/db"
	config "github.com/basedalex/yadro-xkcd/pkg/config"
	gomock "github.com/golang/mock/gomock"
)

// MockxkcdService is a mock of xkcdService interface.
type MockxkcdService struct {
	ctrl     *gomock.Controller
	recorder *MockxkcdServiceMockRecorder
}

// MockxkcdServiceMockRecorder is the mock recorder for MockxkcdService.
type MockxkcdServiceMockRecorder struct {
	mock *MockxkcdService
}

// NewMockxkcdService creates a new mock instance.
func NewMockxkcdService(ctrl *gomock.Controller) *MockxkcdService {
	mock := &MockxkcdService{ctrl: ctrl}
	mock.recorder = &MockxkcdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockxkcdService) EXPECT() *MockxkcdServiceMockRecorder {
	return m.recorder
}

// GetUserByLogin mocks base method.
func (m *MockxkcdService) GetUserByLogin(ctx context.Context, login string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockxkcdServiceMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockxkcdService)(nil).GetUserByLogin), ctx, login)
}

// GetUserPasswordByLogin mocks base method.
func (m *MockxkcdService) GetUserPasswordByLogin(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByLogin", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByLogin indicates an expected call of GetUserPasswordByLogin.
func (mr *MockxkcdServiceMockRecorder) GetUserPasswordByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByLogin", reflect.TypeOf((*MockxkcdService)(nil).GetUserPasswordByLogin), ctx, login)
}

// InvertSearch mocks base method.
func (m *MockxkcdService) InvertSearch(ctx context.Context, cfg *config.Config, s string) (map[string][]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvertSearch", ctx, cfg, s)
	ret0, _ := ret[0].(map[string][]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvertSearch indicates an expected call of InvertSearch.
func (mr *MockxkcdServiceMockRecorder) InvertSearch(ctx, cfg, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvertSearch", reflect.TypeOf((*MockxkcdService)(nil).InvertSearch), ctx, cfg, s)
}

// Reverse mocks base method.
func (m *MockxkcdService) Reverse(ctx context.Context, cfg *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reverse", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reverse indicates an expected call of Reverse.
func (mr *MockxkcdServiceMockRecorder) Reverse(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockxkcdService)(nil).Reverse), ctx, cfg)
}

// SaveComics mocks base method.
func (m *MockxkcdService) SaveComics(ctx context.Context, cfg *config.Config, comics db.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComics", ctx, cfg, comics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveComics indicates an expected call of SaveComics.
func (mr *MockxkcdServiceMockRecorder) SaveComics(ctx, cfg, comics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComics", reflect.TypeOf((*MockxkcdService)(nil).SaveComics), ctx, cfg, comics)
}
